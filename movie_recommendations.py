# -*- coding: utf-8 -*-
"""Movie_Recommendations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QbdEYudTajBXJDbMKqnmrCFti5vv9xzj

**Load Dataset**
"""

import pandas as pd

df=pd.read_csv('/content/movielens_100k_prepared.csv')
df

"""**EDA**"""

df.info()

df.describe()

df.isnull().sum()

df = df.drop('video_release_date', axis=1)

df['release_date'].fillna(df['release_date'].mode()[0], inplace=True)
df['IMDb_URL'].fillna(df['IMDb_URL'].mode()[0], inplace=True)

df.isna().sum()

df.duplicated().sum()

df['rating'].value_counts()

"""**Collaborative filtering model using user‚Äìmovie ratings**"""

# Create User-Item Matrix

user_item_matrix = df.pivot_table(index='user_id', columns='title', values='rating').fillna(0)

user_item_matrix

#Calculating Cosine Similarity between Users
from sklearn.metrics import pairwise_distances
from sklearn.metrics.pairwise import cosine_similarity
from scipy.spatial.distance import cosine, correlation
import numpy as np

#  Compute User Similarity (Cosine)

user_similarity = cosine_similarity(user_item_matrix)
user_similarity_df = pd.DataFrame(user_similarity,
                                  index=user_item_matrix.index,
                                  columns=user_item_matrix.index)

user_similarity_df

# Collaborative Filtering Setup

user_item_matrix = df.pivot_table(index='user_id', columns='title', values='rating').fillna(0)
user_similarity = cosine_similarity(user_item_matrix)
user_similarity_df = pd.DataFrame(user_similarity,
                                  index=user_item_matrix.index,
                                  columns=user_item_matrix.index)


# Content-Based Filtering Setup

genre_cols = ['unknown','Action','Adventure','Animation','Children','Comedy','Crime',
              'Documentary','Drama','Fantasy','Film-Noir','Horror','Musical','Mystery',
              'Romance','Sci-Fi','Thriller','War','Western']

movie_genres = df[['title'] + genre_cols].drop_duplicates().set_index('title')
genre_similarity = cosine_similarity(movie_genres)
genre_similarity_df = pd.DataFrame(genre_similarity,
                                   index=movie_genres.index,
                                   columns=movie_genres.index)


# Hybrid Recommendation Function

def hybrid_recommend(user_id, liked_movie, n=5, alpha=0.5):
    if user_id not in user_item_matrix.index:
        return [f"‚ö†Ô∏è User {user_id} not found."]
    if liked_movie not in genre_similarity_df:
        return [f"‚ö†Ô∏è Movie '{liked_movie}' not found."]

    # Collaborative Filtering
    similar_users = user_similarity_df.loc[user_id].sort_values(ascending=False).drop(user_id)
    weighted_ratings = np.dot(similar_users, user_item_matrix.loc[similar_users.index]) / similar_users.sum()
    collaborative_scores = pd.Series(weighted_ratings, index=user_item_matrix.columns)

    # Content-Based Filtering
    content_scores = genre_similarity_df[liked_movie]

    # Hybrid Score
    hybrid_scores = alpha * collaborative_scores + (1 - alpha) * content_scores

    # Exclude already rated
    user_rated = user_item_matrix.loc[user_id]
    hybrid_scores = hybrid_scores[user_rated[user_rated == 0].index]

    return hybrid_scores.sort_values(ascending=False)[:n].index.tolist()

# Example: Get hybrid recommendations for user 10 who liked 'Toy Story (1995)'

print("Hybrid recommendations for User 10 who liked 'Toy Story (1995)':")
recommendations = hybrid_recommend(user_id=10, liked_movie='Toy Story (1995)', n=5)
print(recommendations)

import streamlit as st
# Streamlit UI
# ---------------------------
st.title("üé¨ Hybrid Movie Recommendation System")
st.sidebar.header("üîß User Preferences")

user_id = st.sidebar.number_input("Enter User ID:",
                                  min_value=int(df["user_id"].min()),
                                  max_value=int(df["user_id"].max()),
                                  value=10)

movie_choice = st.sidebar.selectbox("Select a Movie you liked:", sorted(df["title"].unique()))

alpha = st.sidebar.slider("‚öñÔ∏è Preference Weight (Collaborative vs Content-Based)", 0.0, 1.0, 0.5)

n_recs = st.sidebar.slider("üìå Number of Recommendations", 1, 10, 5)

if st.sidebar.button("Get Recommendations"):
    recs = hybrid_recommend(user_id, movie_choice, n=n_recs, alpha=alpha)
    st.subheader(f"üé• Top {n_recs} Recommendations for User {user_id}")
    for i, movie in enumerate(recs, 1):
        st.write(f"{i}. {movie}")